(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{500:function(a,s,t){"use strict";t.r(s);var r=t(0),e=Object(r.a)({},(function(){var a=this,s=a._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("介绍")]),a._v(" "),s("p",[a._v("Mac 上解决Library not loaded: @rpath/libunwind.1.dylib问题")])]),a._v(" "),s("h2",{attrs:{id:"mac-上解决library-not-loaded-rpath-libunwind-1-dylib问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mac-上解决library-not-loaded-rpath-libunwind-1-dylib问题"}},[a._v("#")]),a._v(" Mac 上解决Library not loaded: @rpath/libunwind.1.dylib问题")]),a._v(" "),s("h3",{attrs:{id:"背景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[a._v("#")]),a._v(" 背景")]),a._v(" "),s("p",[a._v("最近在使用rust编写宏项目时发现编辑器不能展开宏，并提示Library not loaded: @rpath/libunwind.1.dylib，如图所示")]),a._v(" "),s("p",[s("img",{attrs:{src:"2023-12-16.assets/image-20231217134617801.png",alt:"image-20231217134617801"}})]),a._v(" "),s("p",[a._v("然后使用cargo 安装一些命令的时候，也会提示@rpath相关的问题。")]),a._v(" "),s("h3",{attrs:{id:"什么是rpath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是rpath"}},[a._v("#")]),a._v(" 什么是rpath")]),a._v(" "),s("p",[a._v("在 macOS（以及其他 Unix-like 系统）中，RPATH（Run-Time Search Path）是一个存储在可执行文件或动态库中的路径列表。当程序运行时，动态链接器（dynamic linker）会使用 RPATH 来查找和加载所需的动态库。")]),a._v(" "),s("p",[a._v("RPATH 的主要目的是允许开发者指定在运行时搜索和加载共享库的具体路径，而无需依赖于系统默认的库搜索路径。这样可以更灵活地管理库的部署和版本控制，特别是在多个应用程序或库之间共享库时。")]),a._v(" "),s("p",[a._v("在 macOS 中，RPATH 可以通过以下几种方式指定：")]),a._v(" "),s("ol",[s("li",[s("p",[s("strong",[a._v("编译时设置")]),a._v("：在编译可执行文件或动态库时，可以通过链接器选项（如 "),s("code",[a._v("-Wl,-rpath,<path>")]),a._v("）来指定 RPATH。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("安装时设置")]),a._v("：在安装过程中，可以使用工具（如 "),s("code",[a._v("install_name_tool")]),a._v("）来修改已编译的可执行文件或动态库的 RPATH。")])]),a._v(" "),s("li",[s("p",[s("strong",[a._v("运行时环境变量")]),a._v("：在运行程序时，可以通过设置环境变量（如 "),s("code",[a._v("DYLD_LIBRARY_PATH")]),a._v("）来临时覆盖 RPATH。")])])]),a._v(" "),s("p",[a._v("需要注意的是，macOS 从 Mavericks （10.9）开始引入了 @rpath 概念，它提供了一种更灵活的方式来指定库的加载路径。@rpath 是一个占位符，可以在运行时被动态替换为实际的路径。")]),a._v(" "),s("h3",{attrs:{id:"解决方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[a._v("#")]),a._v(" 解决方案")]),a._v(" "),s("p",[a._v("具体原因是rpath路径出问题了，找不到动态链接库。")]),a._v(" "),s("p",[s("strong",[a._v("可以通过命令查找这个文件")])]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("sudo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("find")]),a._v(" /usr "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-name")]),a._v(" libunwind.1.dylib\n")])])]),s("p",[s("img",{attrs:{src:"2023-12-16.assets/image-20231217140434559.png",alt:"image-20231217140434559"}})]),a._v(" "),s("p",[a._v("然后就是添加这个lib路径。")]),a._v(" "),s("p",[a._v("以下是两种方案")]),a._v(" "),s("h4",{attrs:{id:"_1-添加动态链接库到环境变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加动态链接库到环境变量"}},[a._v("#")]),a._v(" 1.添加动态链接库到环境变量")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("vim")]),a._v(" ~/.zshrc\n")])])]),s("p",[a._v("然后把下面代码粘贴进去")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("DYLD_LIBRARY_PATH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/usr/local/lib:'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DYLD_LIBRARY_PATH")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("DYLD_LIBRARY_PATH")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"/opt/homebrew/lib:'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$DYLD_LIBRARY_PATH")]),a._v('"')]),a._v("\n")])])]),s("p",[a._v("然后运行下面bash 命令")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("source")]),a._v(" ~/.zshrc\n")])])]),s("h4",{attrs:{id:"_2-给可执行文件添加rpath"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-给可执行文件添加rpath"}},[a._v("#")]),a._v(" 2.给可执行文件添加rpath")]),a._v(" "),s("p",[a._v("先找到rust-analyzer-proc-macro-srv这个可执行文件。")]),a._v(" "),s("p",[a._v("这个文件是用于cargo check的辅助宏相关功能的可执行文件，在使用vs code中的提示就是它报的错误")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("cd")]),a._v(" ～/.rustup/toolchains/nightly-aarch64-apple-darwin/libexec\n")])])]),s("p",[a._v("然后给它添加rpath")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("install_name_tool "),s("span",{pre:!0,attrs:{class:"token parameter variable"}},[a._v("-add_rpath")]),a._v(" /usr/local/lib  rust-analyzer-proc-macro-srv\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);